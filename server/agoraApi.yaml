openapi: 3.0.2
info:
  title: Agora API
  version: 1.0.0
  description: Agora's super cool API. You can find out more about Agora at [https://freeagora.com](https://freeagora.com)
  termsOfService: https://freeagora.com/terms/
  contact:
    email: api@freeagora.com
  license:
    name: BSD 3-Clause License
    url: https://opensource.org/licenses/BSD-3-Clause
tags:
  - name: Tags
    description: Manage global tags, tags are used to relate other entities and are associated to enities by users using the Tagged object.
paths:
  /tags:
    get:
      tags:
        - Tags
      summary: Retrieves all available tags, provide limit and offset for pagnation, top limit 100.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of records to return, maximum 100
        - in: query
          name: offset
          schema:
            type: integer
          description: The starting record number, defaults to 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - Tags
      summary: Save a new tag. If the name of the tag already exists the current tag will not be duplicated. If the ownedBy member is provided with an existing tag name the owner will be updated to the provided value.  Only the tag value is required.
      requestBody:
        description: Include a Tag object to save in JSON format *NOTE* - Only the tag member is required, id will be ignored, lastUsed will be used if provided and override the default behavior of assigning the authenticed user id, lastUsed will be updated to the current time.
        required: true
        content: 
          application/json:
            schema: 
              type: object
              $ref: '#/components/schemas/ShortTag'
      responses:
        '201':
          description: New Tag created
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Tag'
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '200':
          description: Updated existing record - the tag name already existed, current record used.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Tag'
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /tags/{id}:
    get:
      tags: 
        - Tags 
      summary: Retrieves existing tag by Id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the tag to retrieve 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Tag'
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: 
        - Tags
      summary: Deletes existing tag by Id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the tag to delete 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Tag'
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /goals:
    get:
      tags:
        - Goals
      summary: Retrieves all available goals, provide limit and offset for pagnation, top limit 100.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of records to return, maximum 100
        - in: query
          name: offset
          schema:
            type: integer
          description: The starting record number, defaults to 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Goal/response'
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - Goals
      summary: Checks database for the goal in requestBody by Id. If found and ownedBy flag set, updates existing goal. If not found, creates new goal.
      requestBody:
        description: Include a Goal object to save in JSON format *NOTE* - Only the goal member is required, id will be ignored.
        required: true
        content: 
          application/json:
            schema: 
              type: object
              $ref: '#/components/schemas/Goal/request'
      responses:
        '201':
          description: New Goal created
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Goal/response'
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '200':
          description: Updated existing record - the goal name already existed, current record used.
          application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Goal/response'
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /goals/{id}:
    get:
      tags: 
        - Goals
      summary: Retrieves existing goal by Id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the goal to retrieve 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Goal/response'
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: 
        - Goals
      summary: Deletes existing goal by Id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the goal to delete 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "Success"
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /topics:
    get:
      tags:
        - Topics
      summary: Retrieves all available topics, provide limit and offset for pagnation, top limit 100.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of records to return, maximum 100
        - in: query
          name: offset
          schema:
            type: integer
          description: The starting record number, defaults to 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - Topics
      summary: Checks database for the topic in requestBody by Id. If found and ownedBy flag set, updates existing topic. If not found, creates new topic.
      requestBody:
        description: Include a Topic object to save in JSON format *NOTE* - Only the topic member is required, id will be ignored.
        required: true
        content: 
          application/json:
            schema: 
              type: object
              $ref: '#/components/schemas/Topic'
      responses:
        '201':
          description: New Topic created
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Topic'
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '200':
          description: Updated existing record - the topic name already existed, current record used.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Topic'
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /topics/shared:
    get:
      tags:
        - Topics
      summary: Retrieves all available shared topics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Topic'
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest' 
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /topics/{id}:
    get:
      tags:
        - Topics
      summary: Retrieves existing topic by Id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the topic to retrieve 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Topic'
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags: 
        - Topics
      summary: Deletes existing topic by Id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the topic to delete 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Topic'
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /resources:
    get:
      tags:
        - Resources
      summary: Retrieves all available resources, provide limit and offset for pagnation, top limit 100.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of records to return, maximum 100
        - in: query
          name: offset
          schema:
            type: integer
          description: The starting record number, defaults to 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - Resources
      summary: Checks database for the resource in requestBody by Id. If found and ownedBy flag set, updates existing resource. If not found, creates new resource.
      requestBody:
        description: Include a Resource object to save in JSON format *NOTE* - Only the resouce member is required, id will be ignored.
        required: true
        content: 
          application/json:
            schema: 
              type: object
              $ref: '#/components/schemas/Resouce'
      responses:
        '201':
          description: New Resource created
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Resource'
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '200':
          description: Updated existing record - the resource name already existed, current record used.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Resource'
          headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /resources/user/{id}:
    get:
      tags: 
        - Resources
      summary: Retrieves all available & active resources for a user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the user to retrive their active resources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Resource'
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /resources/shared:
    get:
      tags:
        - Resources
      summary: Retrieves all available shared resources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest' 
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /resources/{id}:
    get:
      tags:
        - Resources
      summary: Retrieves existing resource by Id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the resource to retrieve 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Resource'
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /discussions/goals/{id}:
    get:
      tags: 
        - Discussions
      summary: Gets the discussion by goal ID
      parameters: 
      - in: path
        name: id
        schema:
          type: integer
        description: id of the goal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Discussions'
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    patch:
      tags: 
        - Discussions
      summary: 'Updates discussion using goal ID'
      parameters:
        - in: path
          name: id
          schema:  
            type: integer
          description: id of the topic
        - in: query
          name: body
          schema:
            type: string
          description: The new text to be updated
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Discussions'
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - Discussions
      summary: 'Create a new discussion using goal ID'
      parameters:
        - in: path
          name: id
          schema:  
            type: integer
          description: id of the goal
        - in: query
          name: text
          schema:
            type: string
          description: discussion starting text
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Discussions'
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - Discussions
      summary: 'Deletes a discussion using goal ID'
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Id of the goal
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Discussions'
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /discussions/topics/{id}:
    get:
      tags: 
        - Discussions
      summary: Gets the discussion by topic ID
      parameters: 
      - in: path
        name: id
        schema:
          type: integer
        description: id of the topic
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Discussions'
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    patch:
      tags: 
        - Discussions
      summary: 'Updates discussion using topic ID'
      parameters:
        - in: path
          name: id
          schema:  
            type: integer
          description: id of the topic
        - in: query
          name: body
          schema:
            type: string
          description: The new text to be updated
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Discussions'
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - Discussions
      summary: 'Create a new discussion using topic id'
      parameters:
        - in: path
          name: id
          schema:  
            type: integer
          description: id of the topic
        - in: query
          name: text
          schema:
            type: string
          description: discussion starting text
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Discussions'
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    delete:
      tags:
        - Discussions
      summary: 'Deletes a discussion using topic ID'
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: Id of the topic
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Discussions'
        headers:
            x-agora-message-title:
              schema:
                type: string
              description: Title of Agora API message
            x-agora-message-message:
              schema:
                type: string
              description: Message of Agora API message
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
servers:
  - url: http://localhost:4200/api/v1/auth
  - url: http://freeagora.com/api/v1/auth
components:
  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
  schemas:
    ShortTag:
      type: object
      required:
        - tag
      properties:
        id:
          type: integer
          description: Assigned automatically for new tags, used to update existing tag if provided
        tag:
          type: string
          description: The tag name
        ownedBy:
          type: integer
          description: Id of the user that first generated the tag
        lastUsed:
          type: string
          description: date the tag was last used or updated. This should be set to the current time any time a tag is applied using the tagged object
      example:
        tag: Learning Python
    Tag:
      type: object
      required:
        - tag
      properties:
        id:
          type: integer
          description: Assigned automatically for new tags, used to update existing tag if provided
        tag:
          type: string
          description: The tag name
        ownedBy:
          type: integer
          description: Id of the user that first generated the tag
        lastUsed:
          type: string
          description: date the tag was last used or updated. This should be set to the current time any time a tag is applied using the tagged object
      example:
        id: 10
        tag: Learning Python
        ownedBy: 1
        lastUsed: 2022-08-07T14:04:17.935Z
    Tags:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    Goal:
      request:
        type: object
        required:
          - goalName
        properties:
          id:
            type: integer
            description: Assigned automatically for new goals, used to update existing goal if provided
            uniqueItems: true
          version:
            type: integer
            description: tracks the changes to goals and is automatically incremented on updates
          goalName:
            type: string
            description: The tag
          goalDescription:
            type: string
            description: Description of the goal
          goalImage:
            type: string
            description: filename of the associated image for the goal
          active:
            type: boolean
            description: Active status, inactive items will not be returned in most queries
          completable:
            type: boolean
            description: Completable goals monitor progress of users through topics
          visibility:
            type: integer
            description: Public = 0, Shared = 1, Private = 0
          createTime:
            type: timestamp
            description: Automatically generated timestamp of record creation
          ownedBy:
            type: integer
            description: Id of the user that first generated the tag
        example:
          goalId: -1
          goalName: "Learn how to use Agora"
          goalDescription: "Follow the tutorials and other resources provided to learn the Agora system."
          goalImage: "myImage.png"
          active: true
          completable: true
          visibility: 0
          topics: [2,3]
      response:
          type: object
          required:
            - goalName
          properties:
            id:
              type: integer
              description: Assigned automatically for new goals, used to update existing goal if provided
              uniqueItems: true
            version:
              type: integer
              description: tracks the changes to goals and is automatically incremented on updates
            goalName:
              type: string
              description: The tag
            goalDescription:
              type: string
              description: Description of the goal
            goalImage:
              type: string
              description: filename of the associated image for the goal
            active:
              type: boolean
              description: Active status, inactive items will not be returned in most queries
            completable:
              type: boolean
              description: Completable goals monitor progress of users through topics
            visibility:
              type: integer
              description: Public = 0, Shared = 1, Private = 0
            createTime:
              type: timestamp
              description: Automatically generated timestamp of record creation
            ownedBy:
              type: integer
              description: Id of the user that first generated the tag
          example:
            rid: 1
            id: 1
            goalVersion: 1
            goalName: "Learn how to use Agora"
            goalDescription: "Follow the tutorials and other resources provided to learn the Agora system."
            goalImage: "myImage.png"
            active: true
            completable: true
            visibility: 0
            version: 1
            createTime: 2022-11-02T19:37:11.672Z
    Goals:
      type: array
      items:
        $ref: '#/components/schemas/Goal'
    Topic:
      type: object
      required:
        - topicName
      properties:
        id:
          type: integer
          description: Assigned automatically for new topics, used to update existing topic if provided
          uniqueItems: true
        topicType:
          type: integer
          description: The type
        topicName:
          type: string
          description: The tag
        topicDescription:
          type: string
          description: Description of the topic
        topicImage:
          type: string
          description: filename of the associated image for the topic
        topicHtml:
          type: string
          description: Embedded HTML
        assessmentId:
          type: integer
          description: assessment tag
        activityId:
          type: integer
          description: activity tag
        hasAssessment:
          type: boolean
          description: Whether topic has assessment
        hasActivity:
          type: boolean
          description: Whether topic has activity
        active:
          type: boolean
          description: Active status, inactive items will not be returned in most queries
        visibility:
          type: integer
          description: Public = 2, Shared = 1, Private = 0
        createTime:
          type: timestamp
          description: Automatically generated timestamp of record creation
        ownedBy:
          type: integer
          description: Id of the user that first generated the tag
      example:
        topicId: -1
        topicType: 1
        topicName: "Understanding the Agora Dashboard"
        topicDescription: "Follow the tutorials and other resources provided to learn the Agora Dashboard"
        topicImage: "myImage.png"
        topicHtml: '<div><img src="myImage.png"></div>'
        hasActivity: false
        hasAssessment: false
        activityId: -1
        assessmentId: -1
        active: true
        visibility: 0
    Topics:
      type: array
      items:
        $ref: '#/components/schemas/Topic'
    Discussions:
      type: object
      properties:
        parent_id:
          type: integer
          description: The ID of the parent topic / goal
          uniqueItems: true
        parent_type:
          type: string
          description: The type of the parent
        discussion_text:
          type: string
          description: The text of the original discussion post
        discussion_comments:
          type: array
          description: Array of the comments made on a post, and their user ID
    Resource:
      type: object
      required:
        - resourceName
      properties:
        id:
          type: integer
          description: Assigned automatically for new resources, used to update existing resource if provided
          uniqueItems: true
        resourceType:
          type: string
          description: The type
        resourceName:
          type: string
          description: The tag
        resourceDescription:
          type: string
          description: The synopsis
        resourceContentHtml:
          type: string
          description: Additional description
        resourceImage:
          type: string
          description: filename of the associated image for the resource
        resourceLink:
          type: string
          description: hyperlink to referenced resource
        isRequired:
          type: integer
          description: Not required status, required resources are necessary for ...
        active:
          type: boolean
          description: Active status, inactive items will not be returned in most queries
        visibility:
          type: integer
          description: Public = 2, Shared = 1, Private = 0
        createTime:
          type: timestamp
          description: Automatically generated timestamp of record creation
        ownedBy:
          type: integer
          description: Id of the user that first generated the tag
      example:
        resourceId: -1
        resourceType: 1
        resourceName: "Dashboard Screenshot"
        resourceDescription: "The included screenshot shows the prototype Agora Dashboard"
        resourceContentHtml: '<div><img src="myImage.png"></div>'
        resourceImage: "myImage.png"
        resourceLink: "https://resourcelink.com/"
        isRequired: false
        active: true
        visibility: 0
    Resources:
      type: array
      items:
        $ref: '#/components/schemas/Resource'
  responses:
    BadRequest:
      description: The HyperText Transfer Protocol (HTTP) 400 Bad Request response status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing). See the x-agora-message-title and x-agora-message-detail response parameters for more detail.
      headers:
        x-agora-message-title:
          schema:
            type: string
          description: Title of Agora API message
        x-agora-message-message:
          schema:
            type: string
          description: Message of Agora API message
    UnauthorizedError:
      description: Authentication information is missing or invalid - In basic HTTP authentication, a request contains a header field in the form of Authorization - Basic <credentials>, where credentials is the Base64 encoding of ID and password joined by a single colon. See the x-agora-message-title and x-agora-message-detail response parameters for more detail.
      headers:
        x-agora-message-title:
          schema:
            type: string
          description: Title of Agora API message
        x-agora-message-message:
          schema:
            type: string
          description: Message of Agora API message
    ForbiddenError:
      description: The credentials provided in the Authorization header did not authorize the user to take the requested action. See the x-agora-message-title and x-agora-message-detail response parameters for more detail.
      headers:
        x-agora-message-title:
          schema:
            type: string
          description: Title of Agora API message
        x-agora-message-message:
          schema:
            type: string
          description: Message of Agora API message 
    NotFoundError:
      description: The requested resource was not found. Check id provided or see the x-agora-message-title and x-agora-message-detail response parameters for more detail.
      headers:
        x-agora-message-title:
          schema:
            type: string
          description: Title of Agora API message
        x-agora-message-message:
          schema:
            type: string
          description: Message of Agora API message
security:
  - basicAuth: []