openapi: 3.0.2
info:
  title: Agora API
  version: 1.0.0
  description: Agora's super cool API. You can find out more about Agora at [https://freeagora.com](https://freeagora.com)
  termsOfService: https://freeagora.com/terms/
  contact:
    email: api@freeagora.com
  license:
    name: BSD 3-Clause License
    url: https://opensource.org/licenses/BSD-3-Clause
tags:
  - name: Tags
    description: Manage global tags, tags are used to relate other entities and are associated to enities by users using the Tagged object.
paths:
  /tags:
    get:
      tags:
        - Tags
      summary: Retrieves all available tags, provide limit and offset for pagnation, top limit 100.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: The number of records to return, maximum 100
        - in: query
          name: offset
          schema:
            type: integer
          description: The starting record number, defaults to 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tags'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: No tags found (within limit and offset)
    post:
      tags:
        - Tags
      summary: Save a new tag or update an existing one (by providing the id of the existing entity)
      requestBody:
        description: Include a Tag object to save in JSON format *NOTE* - If id is provided the operation will act as an update to the record with that id, if no id is provide a new record will be created and the id will automatically be assigned
        required: true
        content: 
          application/json:
            schema: 
              type: object
              $ref: '#/components/schemas/Tag'
      respsonses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Tag'
        '401':
          description: Not authorized
  /tags/{id}:
    get:
      tags: 
        - Tags 
      summary: Retrieve existing tag by Id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the tag to retrieve 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Tag Not Found for Id provided
    delete:
      tags: 
        - Tags
      summary: Delete an existing tag providing it's Id
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          description: id of the tag to delete 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Tag'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Tag Not Found for Id provided
  /goals:
    get:
      tags:
        - Goals
      summary: Manage Listing, creating, updating and deleting user goals
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Goals'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
servers:
  - url: http://localhost:4200/api/v1/auth
  - url: http://freeagora.com/api/v1/auth
components:
  securitySchemes:
    basicAuth:     # <-- arbitrary name for the security scheme
      type: http
      scheme: basic
  schemas:
    Tag:
      type: object
      required:
        - tag
      properties:
        id:
          type: integer
          description: Assigned automatically for new tags, used to update existing tag if provided
        tag:
          type: string
          description: The tag name
        ownedBy:
          type: integer
          description: Id of the user that first generated the tag
        lastUsed:
          type: string
          description: date the tag was last used or updated. This should be set to the current time any time a tag is applied using the tagged object
      example:
        id: 1
        tag: Learning Python
        ownedBy: 1
        lastUsed: 2022-08-07T14:04:17.935Z
    Tags:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
    Goal:
      type: object
      required:
        - goalName
      properties:
        id:
          type: integer
          description: Assigned automatically for new goals, used to update existing goal if provided
          uniqueItems: true
        version:
          type: integer
          description: tracks the changes to goals and is automatically incremented on updates
        goalName:
          type: string
          description: The tag
        goalDescription:
          type: string
        goalImage:
          type: string
          description: filename of the associated image for the goal
        active:
          type: boolean
          description: Active status, inactive items will not be returned in most queries
        completable:
          type: boolean
          description: Completable goals monitor progress of users through topics
        visibility:
          type: integer
          description: Public = 0, Shared = 1, Private = 0
        createTime:
          type: timestamp
          description: Automatically generated timestamp of record creation
        ownedBy:
          type: integer
          description: Id of the user that first generated the tag
      example:
        id: 1
        version: 1
        goalName: "Learn how to use Agora"
        goalDescription: "Follow the tutorials and other resources provided to learn the Agora system."
        goalImage: "myImage.png"
        active: true
        completable: true
        visibility: 0
        createTime: "2022-08-07T06:58:53.744Z"
        ownedBy: 1
    Goals:
      type: array
      items:
        $ref: '#/components/schemas/Goal'
  responses:
    UnauthorizedError:
    description: Authentication information is missing or invalid
    headers:
      WWW_Authenticate:
        schema:
          type: string
security:
  - basicAuth: []